#!/usr/bin/env python
# -*- utf-8 -*-
import argparse
import pathlib
import secrets
import shutil
from typing import List

from PIL import Image, ImageDraw
from pathlib import Path
import random


def generate_random_image(path: Path, width: int = 128, height: int = 128):
    random_image = Image.new('RGB', (width, height),
                             color=(random.randint(0, 255)) * 4)

    draw_image = ImageDraw.Draw(random_image)
    draw_image.text(xy=(0, 0),
                    text=path.name.encode('utf-8').decode('latin-1',
                                                          errors='ignore'),
                    fill=(255, 255, 255))
    random_image.save(str(path), format='bmp')


def create_random_dirs(base: Path, num: int = 100):
    dirs = [base]

    for _ in range(num):
        parent = random.choice(dirs)

        def gen() -> pathlib.Path:
            return parent / secrets.token_urlsafe(1).lower()

        new = gen()
        while new in dirs:
            new = gen()
        new.mkdir()
        dirs.append(new)
    print(f'Created {num} directories')
    return dirs


def create_random_images(dirs: List[Path], num: int = 1000) -> List[Path]:
    files = []
    for i in range(num):
        print(f'Writing image #{i}', end='\r', flush=True)
        gen = lambda: secrets.token_urlsafe(5).lower()
        if random.randint(0, 1):
            gen = lambda: ''.join(
                [random.choice('abcde f@!\'".#?\\')
                 for _ in range(8)]).replace('\\', '\\\\')
        file_path = (random.choice(dirs) / '_').with_name(gen() + '.bmp')
        files.append(file_path)
        generate_random_image(file_path,
                              width=random.randint(512, 2048),
                              height=random.randint(128, 2048))
    print(f'Created {num} files.')
    return files


def copy_random_files(files: List[Path],
                      src_dir: Path,
                      dst_dir: Path,
                      remove_original: bool = False,
                      num: int = 300,
                      tmp_probability: float = 0.3) -> List[Path]:
    files = list(files)
    random.shuffle(files)
    files_to_copy = files[:num]
    print('Copying files', end='\r')
    for f in files_to_copy:
        new_name = dst_dir / f.relative_to(src_dir)
        new_name.parent.mkdir(exist_ok=True, parents=True)
        if random.random() < tmp_probability:
            new_name = new_name.with_suffix(new_name.suffix + '~')
        copy = shutil.copy if random.randint(0, 1) else shutil.copy2
        op = copy if not remove_original else shutil.move
        op(str(f), str(new_name))
    print(
        f'{"Copied" if not remove_original else "Moved"} {len(files_to_copy)} to {dst_dir}.',
        flush=True)
    return files_to_copy


def ask_to_rmtree(directory: pathlib.Path):
    if directory.exists():
        if input(
                f'{directory} already exists, delete? [y/n]: ').lower() == 'y':
            shutil.rmtree(str(directory))
        else:
            print('Aborted.')
            exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('--x-dirs',
                        default=100,
                        type=int,
                        help='(default: %(default)s)')
    parser.add_argument('--x-files',
                        default=1000,
                        type=int,
                        help='(default: %(default)s)')
    parser.add_argument('--y-copy',
                        default=300,
                        type=int,
                        help='(default: %(default)s)')
    parser.add_argument('--y-move',
                        default=100,
                        type=int,
                        help='(default: %(default)s)')
    parser.add_argument('--y-copy-tmp-p',
                        default=0.3,
                        type=float,
                        help='(default: %(default)s)')
    parser.add_argument('--num-y',
                        default=1,
                        type=int,
                        help='(default: %(default)s)')
    args = parser.parse_args()

    internal_dir = Path('X').absolute()

    ask_to_rmtree(internal_dir)

    internal_dir.mkdir()
    internal_dirs = create_random_dirs(internal_dir, num=args.x_dirs)

    internal_files = create_random_images(internal_dirs, num=args.x_files)

    for ext_dir in [f'Y{i}' for i in range(args.num_y)]:
        external_dir = Path(ext_dir).absolute()

        ask_to_rmtree(external_dir)

        external_dir.mkdir()

        copied = copy_random_files(internal_files, internal_dir, external_dir)

        copy_random_files([f for f in internal_files if f not in copied],
                          internal_dir,
                          external_dir,
                          remove_original=True,
                          num=100,
                          tmp_probability=args.y_copy_tmp_p)

        internal_files = [f for f in internal_files if f.is_file()]
